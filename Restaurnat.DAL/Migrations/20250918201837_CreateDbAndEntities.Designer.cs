// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Restaurnat.DAL.Database;

#nullable disable

namespace Restaurnat.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250918201837_CreateDbAndEntities")]
    partial class CreateDbAndEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Restaurnat.DAL.Entities.Chef", b =>
                {
                    b.Property<int>("chef_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("chef_id"));

                    b.Property<string>("about")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("experience_years")
                        .HasColumnType("int");

                    b.Property<string>("imagepath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("restaurant_id")
                        .HasColumnType("int");

                    b.Property<bool>("work_now")
                        .HasColumnType("bit");

                    b.HasKey("chef_id");

                    b.HasIndex("restaurant_id");

                    b.ToTable("Chefs");
                });

            modelBuilder.Entity("Restaurnat.DAL.Entities.Event", b =>
                {
                    b.Property<int>("event_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("event_id"));

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("duration")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("restaurant_id")
                        .HasColumnType("int");

                    b.HasKey("event_id");

                    b.HasIndex("restaurant_id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Restaurnat.DAL.Entities.Feedback", b =>
                {
                    b.Property<int>("feedback_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("feedback_id"));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("rating")
                        .HasColumnType("int");

                    b.HasKey("feedback_id");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("Restaurnat.DAL.Entities.Item", b =>
                {
                    b.Property<int>("item_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("item_id"));

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("imagepath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("menu_id")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("recommended")
                        .HasColumnType("bit");

                    b.HasKey("item_id");

                    b.HasIndex("menu_id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Restaurnat.DAL.Entities.Menu", b =>
                {
                    b.Property<int>("nenu_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("nenu_id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("num_of_items")
                        .HasColumnType("int");

                    b.Property<int>("restaurant_id")
                        .HasColumnType("int");

                    b.HasKey("nenu_id");

                    b.HasIndex("restaurant_id");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("Restaurnat.DAL.Entities.Payment", b =>
                {
                    b.Property<int>("payment_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("payment_id"));

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("payment_date")
                        .HasColumnType("datetime2");

                    b.Property<int>("reservation_id")
                        .HasColumnType("int");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("payment_id");

                    b.HasIndex("reservation_id")
                        .IsUnique();

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Restaurnat.DAL.Entities.Reservation", b =>
                {
                    b.Property<int>("reservation_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("reservation_id"));

                    b.Property<bool>("done")
                        .HasColumnType("bit");

                    b.Property<int>("duration")
                        .HasColumnType("int");

                    b.Property<int?>("feedback_id")
                        .HasColumnType("int");

                    b.Property<int>("fees")
                        .HasColumnType("int");

                    b.Property<int>("number_of_people")
                        .HasColumnType("int");

                    b.Property<DateTime>("reservation_date")
                        .HasColumnType("datetime2");

                    b.Property<int>("total_money")
                        .HasColumnType("int");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("reservation_id");

                    b.HasIndex("feedback_id");

                    b.HasIndex("user_id");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Restaurnat.DAL.Entities.ReservedItem", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.HasKey("ItemId", "ReservationId");

                    b.HasIndex("ReservationId");

                    b.ToTable("ReservedItems");
                });

            modelBuilder.Entity("Restaurnat.DAL.Entities.ReservedTable", b =>
                {
                    b.Property<int>("TableId")
                        .HasColumnType("int");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.HasKey("TableId", "ReservationId");

                    b.HasIndex("ReservationId");

                    b.ToTable("ReservedTables");
                });

            modelBuilder.Entity("Restaurnat.DAL.Entities.Restaurant", b =>
                {
                    b.Property<int>("restaurant_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("restaurant_id"));

                    b.Property<string>("about")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("num_of_guests")
                        .HasColumnType("int");

                    b.Property<int?>("num_of_vip_customers")
                        .HasColumnType("int");

                    b.Property<bool>("recommended")
                        .HasColumnType("bit");

                    b.HasKey("restaurant_id");

                    b.ToTable("Restaurants");
                });

            modelBuilder.Entity("Restaurnat.DAL.Entities.Table", b =>
                {
                    b.Property<int>("table_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("table_id"));

                    b.Property<int>("capacity")
                        .HasColumnType("int");

                    b.Property<bool>("is_available")
                        .HasColumnType("bit");

                    b.HasKey("table_id");

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("Restaurnat.DAL.Entities.User", b =>
                {
                    b.Property<int>("user_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("user_id"));

                    b.Property<int>("age")
                        .HasColumnType("int");

                    b.Property<string>("city")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("first_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("imagepath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("last_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone_number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("user_id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Restaurnat.DAL.Entities.Chef", b =>
                {
                    b.HasOne("Restaurnat.DAL.Entities.Restaurant", "Restaurant")
                        .WithMany("Chefs")
                        .HasForeignKey("restaurant_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("Restaurnat.DAL.Entities.Event", b =>
                {
                    b.HasOne("Restaurnat.DAL.Entities.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("restaurant_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("Restaurnat.DAL.Entities.Feedback", b =>
                {
                    b.HasOne("Restaurnat.DAL.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Restaurnat.DAL.Entities.Item", b =>
                {
                    b.HasOne("Restaurnat.DAL.Entities.Menu", "Menu")
                        .WithMany("Items")
                        .HasForeignKey("menu_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("Restaurnat.DAL.Entities.Menu", b =>
                {
                    b.HasOne("Restaurnat.DAL.Entities.Restaurant", "Restaurant")
                        .WithMany("Menus")
                        .HasForeignKey("restaurant_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("Restaurnat.DAL.Entities.Payment", b =>
                {
                    b.HasOne("Restaurnat.DAL.Entities.Reservation", "Reservation")
                        .WithOne("Payment")
                        .HasForeignKey("Restaurnat.DAL.Entities.Payment", "reservation_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("Restaurnat.DAL.Entities.Reservation", b =>
                {
                    b.HasOne("Restaurnat.DAL.Entities.Feedback", "Feedback")
                        .WithMany()
                        .HasForeignKey("feedback_id");

                    b.HasOne("Restaurnat.DAL.Entities.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feedback");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Restaurnat.DAL.Entities.ReservedItem", b =>
                {
                    b.HasOne("Restaurnat.DAL.Entities.Item", "Item")
                        .WithMany("ReservedItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Restaurnat.DAL.Entities.Reservation", "Reservation")
                        .WithMany("ReservedItems")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("Restaurnat.DAL.Entities.ReservedTable", b =>
                {
                    b.HasOne("Restaurnat.DAL.Entities.Reservation", "Reservation")
                        .WithMany("ReservedTables")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Restaurnat.DAL.Entities.Table", "Table")
                        .WithMany("ReservedTables")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Reservation");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("Restaurnat.DAL.Entities.Item", b =>
                {
                    b.Navigation("ReservedItems");
                });

            modelBuilder.Entity("Restaurnat.DAL.Entities.Menu", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Restaurnat.DAL.Entities.Reservation", b =>
                {
                    b.Navigation("Payment")
                        .IsRequired();

                    b.Navigation("ReservedItems");

                    b.Navigation("ReservedTables");
                });

            modelBuilder.Entity("Restaurnat.DAL.Entities.Restaurant", b =>
                {
                    b.Navigation("Chefs");

                    b.Navigation("Menus");
                });

            modelBuilder.Entity("Restaurnat.DAL.Entities.Table", b =>
                {
                    b.Navigation("ReservedTables");
                });

            modelBuilder.Entity("Restaurnat.DAL.Entities.User", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
